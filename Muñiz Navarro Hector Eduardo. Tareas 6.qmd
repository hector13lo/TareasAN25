---
title: "Tarea 6. Ecuaciones diferenciales ordinarias."
author: "Hector Eduardo Muñiz Navarro"
format: 
  html:
    grid: 
      body-width: 1000px
editor: visual
jupyter: python3
---

Packages requeridos:

```{python}
#| code-fold: true

import numpy as np
import matplotlib.pyplot as plt
#Para instalar plotly hay que escribir en la terminal: py -m pip install plotly
import plotly.graph_objects as go
from scipy import integrate
```

# Ejercicio 1

La Ley de Enfriamiento de Newton establece que la tasa de enfriamiento de un objeto es proporcional a la diferencia de temperatura entre el objeto y su entorno. Supongamos que $t$ es el tiempo, $T$ es la temperatura del objeto, y $T_s$ es la temperatura del entorno. La siguiente ecuación diferencial describe la Ley de Newton:

$$
\frac{dT}{dt} = k(T - T_s),
$$

donde $k$ es una constante.

Consideramos una taza de café a 95 °C en una habitación de 18 °C. Se sabe que el café se enfría a una razón de 2 °C/min cuando su temperatura es de 70 °C. Calcula el valor de la constante $k$ y brinda una gráfica de la solución de la ecuación diferencial.

A partir de los datos tenemos que la temperatura del entorno $T_s=18°C$, la cual es considerada constante. Además,

$$
\frac{dT}{dt} = -2°C/min\qquad \text{cuando} \qquad T=70°C
$$ luego,

$$
k = \frac{1}{T-T_s}\frac{dT}{dt}= \frac{1}{70-18}\,(-2) = -\frac{1}{26}
$$

Por lo tanto, el problema con valor inicial cuya solución se aproximará es el siguiente:

$$
\frac{dT}{dt}=-\frac{1}{26}(T-18)\qquad T(0)=95°C
$$

A continuación se muestra tal aproximación para $t\in[0,200]$, donde se observa que aproximadamente a partir de $t=150$ se alcanza la temperatura de equilibrio (18°C)

```{python}
#| code-fold: true
#| fig-align: 'center'

f= lambda t,y: (-1/26)*(y-18)
t0 = 0
tf = 200
t_values = np.linspace(t0, tf, 1000)

edo_sol= integrate.solve_ivp(f, [t0, tf], [95], t_eval= t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="Temperatura")
plt.xlabel('Tiempo (min)')
plt.ylabel('Temperatura (°C)')
plt.title('Ley de Enfriamiento de Newton')
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 2

Brinda una aproximación de la solución del siguiente problema con valor inicial.

$$
y' = t -ty, \qquad y(1)=0.
$$

```{python}
#| code-fold: true
#| fig-align: 'center'

f = lambda t, y: t - t*y
t0 = 1
tf = 5
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], [0], t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)", color='blue')
plt.xlabel('t')
plt.ylabel('y(t)')
plt.title("Solución de y' = t - ty, y(1) = 0")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 3

Para la siguiente ecuación diferencial ordinaria de segundo orden con valores iniciales

$$
u''-3u'-1.5 u= 8\,sen(3t), \qquad u(1)=-0.5, u'(1)=1
$$

Escribe el respectivo sistema de ecuaciones diferenciales de primer orden considerando que $v=u'(t)$ (velocidad) y posteriormente brinda la solución del sistema por medio de las funciones $u(t)$ y $v(t)$

Para expresar la ecuación de segundo orden en un sistema de dos ecuaciones diferenciales de primer orden, consideramos la velocidad como $v(t)=u'(t)$, luego, $v'(t)=u''(t)$, al despejar $u''(t)$ y sustituyendo las igualdades descritas tenemos:

$$
v'(t)= u''(t)= 8\,sen(3t)+3u'+1.5u=8\,sen(3t)+3v+1.5u
$$

Luego, el sistema de ecuaciones diferenciales es,

$$
\begin{cases}
u'  = v\\
v'  = 8\,sen(3t)+3v+1.5u
\end{cases}
$$

con las condiciones iniciales $u(1)=-0.5$, $v(1)=1$

```{python}
#| code-fold: true

def f(t, U):
    u, v = U
    return [v, 3*v + 1.5*u + 8*np.sin(3*t)]

t0 = 1
tf = 3
s0 = np.array([-0.5, 1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="u(t)")
plt.plot(t_values, edo_sol.y[1], label="v(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Sistema de EDO de segundo orden")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 4

**Oscilador armónico simple**

$$
y'' + 4y = 0,\quad y(0) = 1,\ y'(0) = 0
$$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = -4y
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    y, v = Y
    return [v, -4*y]

t0 = 0
tf = 5
s0 = np.array([1, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Oscilador armónico simple")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 5

**Oscilador amortiguado**

$$
y'' + 0.5y' + 4y = 0,\quad y(0) = 2,\ y'(0) = 0
$$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = -0.5v - 4y
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    y, v = Y
    return [v, -0.5*v - 4*y]

t0 = 0
tf = 10
s0 = np.array([2, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Oscilador amortiguado")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 6

**Oscilador forzado**

$$
y'' + 2y' + y = \cos(t),\quad y(0) = 0,\ y'(0) = 1
$$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = \cos(t) - 2v - y
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    y, v = Y
    return [v, np.cos(t) - 2*v - y]

t0 = 0
tf = 15
s0 = np.array([0, 1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Oscilador forzado")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 7

**Ecuación no lineal de segundo orden**

$$
y'' = -y^3 + \cos(t),\quad y(0) = 0,\ y'(0) = 0
$$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = -y^3 + \cos(t)
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    y, v = Y
    return [v, -y**3 + np.cos(t)]

t0 = 0
tf = 10
s0 = np.array([0, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Ecuación no lineal de segundo orden")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 8

**Amortiguamiento cuadrático**

$$
y'' + y'^2 + y = 0,\quad y(0) = 1,\ y'(0) = -1
$$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = -v^2 - y
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    y, v = Y
    return [v, -v**2 - y]

t0 = 0
tf = 5
s0 = np.array([1, -1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Amortiguamiento cuadrático")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 9

**Péndulo simple (no lineal)**

$$
\theta'' + \sin(\theta) = 0,\quad \theta(0) = \frac{\pi}{4},\ \theta'(0) = 0
$$

Sistema de primer orden: Sea $\omega = \theta'$, entonces: $$
\begin{cases}
\theta' = \omega\\
\omega' = -\sin(\theta)
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    theta, omega = Y
    return [omega, -np.sin(theta)]

t0 = 0
tf = 10
s0 = np.array([np.pi/4, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="θ(t)")
plt.plot(t_values, edo_sol.y[1], label="θ'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Péndulo simple (no lineal)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 10

**Circuito RLC**

$$
LQ'' + RQ' + \frac{1}{C}Q = V(t),\quad Q(0) = 0,\ Q'(0) = 0,\quad V(t) = \sin(t)
$$

Consideramos la corriente como la derivada de la carga, es decir $I(t)=Q'(t)$, por lo tanto $I'(t)=Q''(t)$, al despejar la segunda derivada de la carga de la ecuación diferencial de segundo orden y al llevar las sustituciones descritas se obtiene el siguiente sistema de primer orden,

$$
\begin{cases}
Q' = I\\
I' = \frac{1}{L} \left( \sin(t) - R\, I-\frac{Q}{C} \right)
\end{cases}
$$

con las condiciones iniciales $Q(0)=0, I(0)=0$.

```{python}
#| code-fold: true

def f(t, Q, L, R, C):
    q, i = Q
    return [i, (1/L)*(np.sin(t) - R*i - q/C)]

t0 = 0
tf = 50
s0 = np.array([0, 0])
t_values = np.linspace(t0, tf, 10000)

L = 0.5
R = 2
C = 5

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, args=(L, R, C))

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="Q(t)")
plt.plot(t_values, edo_sol.y[1], label="I(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Circuito RLC")
plt.grid()
plt.legend()
plt.show()
```

Trayectoria

```{python}
#| code-fold: true

plt.figure(figsize=(8,6))
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('Q(t)')
plt.ylabel('I(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 11

**Ecuación de Bessel aproximada**

$$
x^2y'' + xy' + (x^2 - 1)y = 0,\quad y(1) = 0.5,\ y'(1) = -0.1
$$

Reescribiendo: $y'' = \frac{1}{x^2}[-(x^2-1)y - xy']$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = \frac{1}{x^2}[-(x^2-1)y - xv]
\end{cases}
$$

```{python}
#| code-fold: true

def f(x, Y):
    y, v = Y
    if x == 0:
        x = 1e-10  # Evitar división por cero
    return [v, -(x**2 - 1)*y/x**2 - v/x]

x0 = 1
xf = 5
s0 = np.array([0.5, -0.1])
x_values = np.linspace(x0, xf, 1000)

edo_sol = integrate.solve_ivp(f, [x0, xf], s0, t_eval=x_values)

plt.figure(figsize=(8,6))
plt.plot(x_values, edo_sol.y[0], label="y(x)")
plt.plot(x_values, edo_sol.y[1], label="y'(x)")
plt.xlabel('x')
plt.ylabel('Función')
plt.title("Ecuación de Bessel aproximada")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 12

**No lineal con exponencial**

$$
y'' + y e^y = \sin(t),\quad y(0) = 0,\ y'(0) = 1
$$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = \sin(t) - y e^y
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    y, v = Y
    return [v, np.sin(t) - y*np.exp(y)]

t0 = 0
tf = 5
s0 = np.array([0, 1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("No lineal con exponencial")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 13

**Cuerda con fuerza externa**

$$
y'' = -\pi^2 y + \cos(2\pi t),\quad y(0) = 1,\ y'(0) = 0
$$

Sistema de primer orden: Sea $v = y'$, entonces: $$
\begin{cases}
y' = v\\
v' = -\pi^2 y + \cos(2\pi t)
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, Y):
    y, v = Y
    return [v, -np.pi**2 * y + np.cos(2*np.pi*t)]

t0 = 0
tf = 3
s0 = np.array([1, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Cuerda con fuerza externa")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 14

**EDO homogénea de tercer orden**

$$
y''' - 3y'' + 3y' - y = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 1
$$

Sistema de primer orden: Sean $u_1 = y$, $u_2 = y'$, $u_3 = y''$, entonces: $$
\begin{cases}
u_1' = u_2\\
u_2' = u_3\\
u_3' = u_1 - 3u_2 + 3u_3
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, U):
    u1, u2, u3 = U
    return [u2, u3, u1 - 3*u2 + 3*u3]

t0 = 0
tf = 3
s0 = np.array([1, 0, 1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.plot(t_values, edo_sol.y[2], label="y''(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("EDO homogénea de tercer orden")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 15

**EDO de tercer orden con término no lineal**

$$
y''' + y^2 = 0,\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = 0
$$

Sistema de primer orden: Sean $u_1 = y$, $u_2 = y'$, $u_3 = y''$, entonces: $$
\begin{cases}
u_1' = u_2\\
u_2' = u_3\\
u_3' = -u_1^2
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, U):
    u1, u2, u3 = U
    return [u2, u3, -u1**2]

t0 = 0
tf = 5
s0 = np.array([1, 0, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.plot(t_values, edo_sol.y[2], label="y''(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("EDO de tercer orden con término no lineal")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 16

**Oscilador cúbico forzado**

$$
y''' + y'' + y^3 = \cos(t),\quad y(0) = 0,\ y'(0) = 1,\ y''(0) = 0
$$

Sistema de primer orden: Sean $u_1 = y$, $u_2 = y'$, $u_3 = y''$, entonces: $$
\begin{cases}
u_1' = u_2\\
u_2' = u_3\\
u_3' = \cos(t) - u_3 - u_1^3
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, U):
    u1, u2, u3 = U
    return [u2, u3, np.cos(t) - u3 - u1**3]

t0 = 0
tf = 10
s0 = np.array([0, 1, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.plot(t_values, edo_sol.y[2], label="y''(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Oscilador cúbico forzado")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 17

**Ecuación tipo dispersión (Korteweg-de Vries simplificada)**

$$
y''' - 6yy' = 0,\quad y(0) = 2,\ y'(0) = 0,\ y''(0) = -1
$$

Sistema de primer orden: Sean $u_1 = y$, $u_2 = y'$, $u_3 = y''$, entonces: $$
\begin{cases}
u_1' = u_2\\
u_2' = u_3\\
u_3' = 6u_1u_2
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, U):
    u1, u2, u3 = U
    return [u2, u3, 6*u1*u2]

t0 = 0
tf = 2
s0 = np.array([2, 0, -1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.plot(t_values, edo_sol.y[2], label="y''(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Ecuación tipo dispersión (KdV simplificada)")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 18

**Modelo no lineal de conducción**

$$
y''' = -y y'' + y',\quad y(0) = 1,\ y'(0) = 0,\ y''(0) = -1
$$

Sistema de primer orden: Sean $u_1 = y$, $u_2 = y'$, $u_3 = y''$, entonces: $$
\begin{cases}
u_1' = u_2\\
u_2' = u_3\\
u_3' = -u_1u_3 + u_2
\end{cases}
$$

```{python}
#| code-fold: true

def f(t, U):
    u1, u2, u3 = U
    return [u2, u3, -u1*u3 + u2]

t0 = 0
tf = 5
s0 = np.array([1, 0, -1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="y(t)")
plt.plot(t_values, edo_sol.y[1], label="y'(t)")
plt.plot(t_values, edo_sol.y[2], label="y''(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Modelo no lineal de conducción")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 19

Una persona abre una cuenta bancaria con un saldo inicial de $2000$ dólares. Sea $b(t)$ el saldo en la cuenta en el tiempo t. Así, $b(0) = 2000$. El banco paga intereses a una tasa continua del $5\%$ anual. La persona realiza depósitos en la cuenta a una tasa continua de $s(t)$ dólares por año. Supongamos que $s(0) = 500$ y que $s(t)$ está aumentando a una tasa continua del $4\%$ anual (la persona puede ahorrar más conforme aumenta su ingreso con el tiempo). Brinda el sistema de ecuaciones diferenciales ordinarias y gráfica la solución $b(t)$ y $s(t)$.

Sistema de ecuaciones diferenciales: $$
\begin{cases}
\frac{db}{dt} = 0.05b + s\\
\frac{ds}{dt} = 0.04s
\end{cases}
$$

con condiciones iniciales $b(0) = 2000$, $s(0) = 500$.

```{python}
#| code-fold: true

def f(t, X):
    b, s = X
    return [0.05*b + s, 0.04*s]

t0 = 0
tf = 10
s0 = np.array([2000, 500])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="b(t) - Saldo")
plt.plot(t_values, edo_sol.y[1], label="s(t) - Tasa de depósito")
plt.xlabel('Tiempo (años)')
plt.ylabel('Dólares')
plt.title("Modelo de cuenta bancaria")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 20

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias

\begin{eqnarray}
x'(t) & = -6 x - 3 y\\
y'(t) & = -15 x + 6y
\end{eqnarray}

donde $x(0)= 3$ y $y(0)=2$. Grafica cada una de las funciones y la trayectoria.

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [-6*x - 3*y, -15*x + 6*y]

t0 = 0
tf = 2
s0 = np.array([3, 2])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Funciones x(t) e y(t)")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 21

Considera la interacción de dos especies de animales en un hábitat. Considerando que las poblaciones $x(t)$ y $y(t)$ pueden ser modeladas por medio de las ecuaciones

\begin{eqnarray}
x'(t) & = 1.4 x - y\\
y'(t) & = -1.25 x + 3.4y
\end{eqnarray}

donde $x(0)=7$ y $y(0)=3$. Grafica cada una de las funciones que brindan la población de cada especie al tiempo $t$.

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [1.4*x - y, -1.25*x + 3.4*y]

t0 = 0
tf = 3
s0 = np.array([7, 3])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

plt.figure(figsize=(8,6))
plt.plot(t_values, edo_sol.y[0], label="x(t) - Especie 1")
plt.plot(t_values, edo_sol.y[1], label="y(t) - Especie 2")
plt.xlabel('Tiempo')
plt.ylabel('Población')
plt.title("Interacción de dos especies")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 22

Aproxima la solución del siguiente sistema de ecuaciones diferenciales ordinarias,

\begin{eqnarray}
y'_1(t) & = -6.2 +1.1 y_1 - 0.8 y_2\\
y'_2(t) & = -13.8 +2.1 y_1 -1.2 y_2
\end{eqnarray}

con los valores iniciales $y_1(0)=11$, $y_2(0)=4$. Grafica cada una de las funciones y la trayectoria.

```{python}
#| code-fold: true

def f(t, Y):
    y1, y2 = Y
    return [-6.2 + 1.1*y1 - 0.8*y2, -13.8 + 2.1*y1 - 1.2*y2]

t0 = 0
tf = 5
s0 = np.array([11, 4])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.y[0], label="y₁(t)")
plt.plot(t_values, edo_sol.y[1], label="y₂(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Funciones y₁(t) e y₂(t)")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('y₁(t)')
plt.ylabel('y₂(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 23

**Sistema logístico con depredación**

\$

\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy \\
\frac{dy}{dt} = -y + xy \\
x(0) = 0.9,\quad y(0) = 0.1
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [x*(1 - x) - x*y, -y + x*y]

t0 = 0
tf = 20
s0 = np.array([0.9, 0.1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.y[0], label="x(t) - Presa")
plt.plot(t_values, edo_sol.y[1], label="y(t) - Depredador")
plt.xlabel('t')
plt.ylabel('Población')
plt.title("Sistema logístico con depredación")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 24

**Oscilador de Van der Pol**

\$

\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = \mu (1 - x^2)y - x \\
x(0) = 2,\quad y(0) = 0,\quad \mu = 3
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X, mu):
    x, y = X
    return [y, mu*(1 - x**2)*y - x]

mu = 3
t0 = 0
tf = 30
s0 = np.array([2, 0])
t_values = np.linspace(t0, tf, 5000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, args=(mu,))

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title(f"Oscilador de Van der Pol (μ = {mu})")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

Órbitas para diferentes valores de μ

```{python}
#| code-fold: true

val_mu = np.linspace(1, 10, 5)

plt.figure(figsize=(8,6))
for mu in val_mu:
    edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, args=(mu,))
    plt.plot(edo_sol.y[0], edo_sol.y[1], label=f"μ = {mu:.1f}")

plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Órbitas para diferentes valores de μ")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 25

**Sistema de Lotka-Volterra**

\$

\begin{cases}
\frac{dx}{dt} = \alpha x - \beta xy \\
\frac{dy}{dt} = \delta xy - \gamma y \\
x(0) = 10,\quad y(0) = 5,\quad \alpha = 1.5,\ \beta = 1,\ \delta = 1,\ \gamma = 3
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X, alpha, beta, delta, gamma):
    x, y = X
    return [alpha*x - beta*x*y, delta*x*y - gamma*y]

alpha, beta, delta, gamma = 1.5, 1, 1, 3
t0 = 0
tf = 10
s0 = np.array([10, 5])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, 
                             args=(alpha, beta, delta, gamma))

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.y[0], label="x(t) - Presa")
plt.plot(t_values, edo_sol.y[1], label="y(t) - Depredador")
plt.xlabel('t')
plt.ylabel('Población')
plt.title("Sistema de Lotka-Volterra")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('x(t) - Presa')
plt.ylabel('y(t) - Depredador')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 26

**Interacción no lineal seno-coseno**

\$

\begin{cases}
\frac{dx}{dt} = \sin(y) - x^3 \\
\frac{dy}{dt} = \cos(x) - y^2 \\
x(0) = 1,\quad y(0) = 0
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [np.sin(y) - x**3, np.cos(x) - y**2]

t0 = 0
tf = 10
s0 = np.array([1, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.y[0], label="x(t)")
plt.plot(t_values, edo_sol.y[1], label="y(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Interacción no lineal seno-coseno")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 27

**FitzHugh-Nagumo (modelo de neurona)**

\$

\begin{cases}
\frac{dv}{dt} = v - \frac{v^3}{3} - w + I \\
\frac{dw}{dt} = 0.08(v + 0.7 - 0.8w) \\
v(0) = -1,\quad w(0) = 1,\quad I = 0.5
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X, I):
    v, w = X
    return [v - v**3/3 - w + I, 0.08*(v + 0.7 - 0.8*w)]

I = 0.5
t0 = 0
tf = 50
s0 = np.array([-1, 1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, args=(I,))

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.y[0], label="v(t) - Voltaje")
plt.plot(t_values, edo_sol.y[1], label="w(t) - Variable de recuperación")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Modelo FitzHugh-Nagumo")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.y[0], edo_sol.y[1], label="Trayectoria", color='red')
plt.xlabel('v(t)')
plt.ylabel('w(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 28

**Sistema no autónomo**

\$

\begin{cases}
\frac{dx}{dt} = x \sin(t) + y^2 \\
\frac{dy}{dt} = -y \cos(t) + x \\
x(0) = 1,\quad y(0) = -1
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [x*np.sin(t) + y**2, -y*np.cos(t) + x]

t0 = 0
tf = 10
s0 = np.array([1, -1])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.t[0], label="x(t)")
plt.plot(t_values, edo_sol.t[1], label="y(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Sistema no autónomo")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.t[0], edo_sol.t[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 29

**Modelo epidemiológico SIR (en este caso no graficar la trayectoria)**

\$

\begin{cases}
\frac{dS}{dt} = -\beta S I \\
\frac{dI}{dt} = \beta S I - \gamma I \\
\frac{dR}{dt} = \gamma I \\
S(0) = 0.99,\quad I(0) = 0.01,\quad R(0) = 0,\quad \beta = 0.5,\ \gamma = 0.1
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X, beta, gamma):
    S, I, R = X
    return [-beta*S*I, beta*S*I - gamma*I, gamma*I]

beta, gamma = 0.5, 0.1
t0 = 0
tf = 50
s0 = np.array([0.99, 0.01, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values, args=(beta, gamma))

plt.figure(figsize=(10,6))
plt.plot(t_values, edo_sol.t[0], label="S(t) - Susceptibles", color='blue')
plt.plot(t_values, edo_sol.t[1], label="I(t) - Infectados", color='red')
plt.plot(t_values, edo_sol.t[2], label="R(t) - Recuperados", color='green')
plt.xlabel('Tiempo')
plt.ylabel('Proporción de la población')
plt.title("Modelo epidemiológico SIR")
plt.grid()
plt.legend()
plt.show()
```

# Ejercicio 30

**Crecimiento logístico cruzado**

\$

\begin{cases}
\frac{dx}{dt} = x(1 - x - 0.5y) \\
\frac{dy}{dt} = y(1 - y - 0.3x) \\
x(0) = 0.5,\quad y(0) = 0.2
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [x*(1 - x - 0.5*y), y*(1 - y - 0.3*x)]

t0 = 0
tf = 15
s0 = np.array([0.5, 0.2])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.t[0], label="x(t) - Especie 1")
plt.plot(t_values, edo_sol.t[1], label="y(t) - Especie 2")
plt.xlabel('t')
plt.ylabel('Población')
plt.title("Crecimiento logístico cruzado")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.t[0], edo_sol.t[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 31

**Movimiento en campo no lineal**

\$

\begin{cases}
\frac{dx}{dt} = y \\
\frac{dy}{dt} = -\sin(x) - 0.5 y \\
x(0) = \pi/2,\quad y(0) = 0
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [y, -np.sin(x) - 0.5*y]

t0 = 0
tf = 15
s0 = np.array([np.pi/2, 0])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.t[0], label="x(t) - Posición")
plt.plot(t_values, edo_sol.t[1], label="y(t) - Velocidad")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Movimiento en campo no lineal")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.t[0], edo_sol.t[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```

# Ejercicio 32

**Sistema no lineal acoplado**

\$

\begin{cases}
\frac{dx}{dt} = x(1 - x) - xy^2 \\
\frac{dy}{dt} = y(1 - y) - x^2y \\
x(0) = 0.8,\quad y(0) = 0.6
\end{cases}

\$

```{python}
#| code-fold: true

def f(t, X):
    x, y = X
    return [x*(1 - x) - x*y**2, y*(1 - y) - x**2*y]

t0 = 0
tf = 20
s0 = np.array([0.8, 0.6])
t_values = np.linspace(t0, tf, 1000)

edo_sol = integrate.solve_ivp(f, [t0, tf], s0, t_eval=t_values)

# Gráfica de las funciones
plt.figure(figsize=(12,5))

plt.subplot(1, 2, 1)
plt.plot(t_values, edo_sol.t[0], label="x(t)")
plt.plot(t_values, edo_sol.t[1], label="y(t)")
plt.xlabel('t')
plt.ylabel('Función')
plt.title("Sistema no lineal acoplado")
plt.grid()
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(edo_sol.t[0], edo_sol.t[1], label="Trayectoria", color='red')
plt.xlabel('x(t)')
plt.ylabel('y(t)')
plt.title("Trayectoria en el espacio fase")
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
```
